#linked list

'''
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def set_next(self,next):
        self.next=next

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add_at_end(self,data):
        new_node=Node(data)    #create new node
        if (self.__head is None):  #if empty
            self.__head=self.__tail=new_node  #set new node as head and tail
            return "Element added successfully: "+str(self.__tail.get_data())
        else:  #if not empty
            self.__tail.set_next(new_node)    #set tail next to new node
            self.__tail=new_node     #set new node as tail
            return "Element added successfully: "+str(self.__tail.get_data())
    
    def add_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.__head)
        self.__head=new_node
        return "data inserted"

    def add_in_between(self,data,data_before):
        new_node=Node(data)
        if data_before==None:
            new_node.set_next(self.__head)    #set head as next to new node
            self.__head=new_node      #make new node as head node
            if new_node.get_next()==None:      #check if next of new node empty or not
                self.__tail=new_node       #if empty then make that new node as tail also
        else:   #if data before is specified
            node_before=self.find_node(data_before)    #find the data before
            if node_before is not None:     #if the node foound is not empty
                new_node.set_next(node_before.get_next())     #set the next of new node 
                node_before.set_next(new_node)    #set the next of data before
            else: #if node before is empty
                print(data_before," is not present in linked list")

    def find_node(self,data):
        temp=self.__head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)     #find node to be deleted
        if node is not None:   #if node to be deleted is found and not empty
            if node==self.__head:   #check if that node is head or not
                if self.__head==self.__tail:   #check if that head is tail also or not
                    self.__tail=None  #empty the tail node
                self.__head=node.get_next() #make the next node as head node
            else:
                temp=self.__head
                while temp is not None:
                    if temp.get_next()==node:
                        temp.set_next(node.get_next())
                        if node==self.__tail:
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element deleted successfully")
        else:
            print(data," is not present in linked list")

    def display(self):
        temp=self.__head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

if __name__=="__main__":
    mylist=LinkedList()
    while True:
        print("Select an option:")
        print("1. Add at end; 2.Add at the beginning; 3.Add in between; 4.find node; 5.Delete; 6.display")
        do=int(input("enter the choice:"))
        if do==1:
            data=int(input("enter the element to be inserted: "))
            result=mylist.add_at_end(data)
            print(result)
        elif do==2:
            data=int(input("enter the element to be inserted: "))
            mylist.add_at_beginning(data)
        elif do==3:
            data=int(input("enter the element to be inserted: "))
            data_before=int(input("enter the element after which the new data is to be added:"))
            result=mylist.add_in_between(data,data_before)
            print(result)
        elif do==4:
            data=int(input("enter the element to be found: "))
            result=mylist.find_node(data)
            if result is not None:
                print(result)
            else:
                print("data not found")
        elif do==5:
            data=int(input("enter the element to be deleted: "))
            mylist.delete(data)
        elif do==6:
            mylist.display()
        else:
            print("wrong selection")'''

'''
Given a linked list of characters. 
Write a python function to return a new string that is created by appending all the characters given in the linked list 
as per the rules given below.

Rules:

1. Replace '*' or '/' by a single space

2. In case of two consecutive occurrences of '*' or '/' , replace those two occurrences by a single space and 
convert the next character to upper case.

Assume that 

1. There will not be more than two consecutive occurrences of '*' or '/'

2. The linked list will always end with an alphabet

Sample Input	                                                                           Expected Output
 A,n,*,/,a,p,p,l,e,*,a,/,day,*,*,k,e,e,p,s,/,*,a,/,/,d,o,c,t,o,r,*,A,w,a,y	         An Apple a day Keeps A Doctor Away
 
'''

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def set_next(self,next):
        self.next=next

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add_at_end(self,data):
        new_node=Node(data)    #create new node
        if (self.__head is None):  #if empty
            self.__head=self.__tail=new_node  #set new node as head and tail
            return "Element added successfully: "+str(self.__tail.get_data())
        else:  #if not empty
            self.__tail.set_next(new_node)    #set tail next to new node
            self.__tail=new_node     #set new node as tail
            return "Element added successfully: "+str(self.__tail.get_data())
    
    def add_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.__head)
        self.__head=new_node
        return "data inserted"

    def add_in_between(self,data,data_before):
        new_node=Node(data)
        if data_before==None:
            new_node.set_next(self.__head)    #set head as next to new node
            self.__head=new_node      #make new node as head node
            if new_node.get_next()==None:      #check if next of new node empty or not
                self.__tail=new_node       #if empty then make that new node as tail also
        else:   #if data before is specified
            node_before=self.find_node(data_before)    #find the data before
            if node_before is not None:     #if the node foound is not empty
                new_node.set_next(node_before.get_next())     #set the next of new node 
                node_before.set_next(new_node)    #set the next of data before
            else: #if node before is empty
                print(data_before," is not present in linked list")

    def find_node(self,data):
        temp=self.__head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)     #find node to be deleted
        if node is not None:   #if node to be deleted is found and not empty
            if node==self.__head:   #check if that node is head or not
                if self.__head==self.__tail:   #check if that head is tail also or not
                    self.__tail=None  #empty the tail node
                self.__head=node.get_next() #make the next node as head node
            else:
                temp=self.__head
                while temp is not None:
                    if temp.get_next()==node:
                        temp.set_next(node.get_next())
                        if node==self.__tail:
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element deleted successfully")
        else:
            print(data," is not present in linked list")

    def display(self):
        temp=self.__head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

def create_new_sentence(word_list):
    new_sentence=""
    temp=word_list.get_head()
    status=0
    while(temp):
        ch=temp.get_data()
        if ch=='/' or ch=='*':
            new_sentence+=" "
            if temp.get_next().get_data()=="/" or temp.get_next().get_data()=="*":
                status=1
                temp=temp.get_next()
            temp=temp.get_next()
            continue
        if status==1:
            ch=ch.upper()
            status=0
        new_sentence+=ch
        temp=temp.get_next()
    return new_sentence

word_list=LinkedList()
word_list.add_at_end("A")
word_list.add_at_end("n")
word_list.add_at_end("*")
word_list.add_at_end("/")
word_list.add_at_end("a")
word_list.add_at_end("p")
word_list.add_at_end("p")
word_list.add_at_end("l")
word_list.add_at_end("e")
word_list.add_at_end("*")
word_list.add_at_end("d")
word_list.add_at_end("a")
word_list.add_at_end("y")
result=create_new_sentence(word_list)
print(result)


'''
Write a python program to remove all duplicate elements from a sorted linked list containing integer data.
Use the LinkedList class and methods in it to implement the above program.

Example: 
Input LinkedList: 10 10 20 20 30 30 30 40 50
Output LinkedList: 10 20 30 40 50
'''


class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data
    
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add_at_end(self,data):
        new_node=Node(data)         #create a new node
        if self.__head is None:      #if linked list is empty
            self.__head=self.__tail=new_node      #make that new_node as ead and tail both
            return "Element added successfully: "+str(self.__tail.get_data())
        else:           #if list is not empty
            self.__tail.set_next(new_node)  #set the next of tail node
            self.__tail=new_node    #make the new node as tail node
            return "Element added successfully: "+str(self.__tail.get_data())

    def add_at_beginning(self,data):
        new_node=Node(data)         #create a new node
        new_node.set_next(self.__head)
        self.__head=new_node
        return "data inserted"

    def add_in_between(self,data,data_before):
        new_node=Node(data)         #create a new node
        if data_before==None:
            new_node.set_next(self.__head)
            self.__head=new_node
            if new_node.get_next()==None:
                self.__tail=new_node
        else:
            node_before=self.find_node(data_before)
            if node_before is not None:
                new_node.set_next(node_before.get_next())
                node_before.set_next(new_node)
            else:
                print(data_before, "is not present in linkedlist")

    def find_node(self,data):
        temp=self.__head
        while(temp is not None):
            if temp.get_data()==data:
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)
        if node is not None:
            if node==self.__head:
                if self.__head==self.__tail:
                    self.__tail=None
                self.__head=node.get_next()
            else:
                temp=self.__head
                while temp is not None:
                    if temp.get_next()==node:
                        temp.set_next(node.get_next())
                        if node==self.__tail:
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element has been deleted successfully")
        else:
            print(data," is not present in linked list")

    def display(self):
         temp=self.__head
         while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

def remove_duplicates(duplicate_list):
    temp=duplicate_list.get_head()
    while temp.get_next():
        if temp.get_data()==temp.get_next().get_data():
            temp1=temp
            temp=temp.get_next()
            duplicate_list.delete(temp1.get_data())
            continue
        temp=temp.get_next()
    duplicate_list.display()
    return duplicate_list

duplicate_list=LinkedList()
duplicate_list.add_at_end(10)
duplicate_list.add_at_end(10)
duplicate_list.add_at_end(20)
duplicate_list.add_at_end(20)
duplicate_list.add_at_end(30)
duplicate_list.add_at_end(30)
duplicate_list.add_at_end(30)
duplicate_list.add_at_end(40)

remove_duplicates(duplicate_list)

#####a3
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data
    
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add_at_end(self,data):
        new_node=Node(data)         #create a new node
        if self.__head is None:      #if linked list is empty
            self.__head=self.__tail=new_node      #make that new_node as ead and tail both
            return "Element added successfully: "+str(self.__tail.get_data())
        else:           #if list is not empty
            self.__tail.set_next(new_node)  #set the next of tail node
            self.__tail=new_node    #make the new node as tail node
            return "Element added successfully: "+str(self.__tail.get_data())

    def add_at_beginning(self,data):
        new_node=Node(data)         #create a new node
        new_node.set_next(self.__head)
        self.__head=new_node
        return "data inserted"

    def add_in_between(self,data,data_before):
        new_node=Node(data)         #create a new node
        if data_before==None:
            new_node.set_next(self.__head)
            self.__head=new_node
            if new_node.get_next()==None:
                self.__tail=new_node
        else:
            node_before=self.find_node(data_before)
            if node_before is not None:
                new_node.set_next(node_before.get_next())
                node_before.set_next(new_node)
            else:
                print(data_before, "is not present in linkedlist")

    def find_node(self,data):
        temp=self.__head
        while(temp is not None):
            if temp.get_data()==data:
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)
        if node is not None:
            if node==self.__head:
                if self.__head==self.__tail:
                    self.__tail=None
                self.__head=node.get_next()
            else:
                temp=self.__head
                while temp is not None:
                    if temp.get_next()==node:
                        temp.set_next(node.get_next())
                        if node==self.__tail:
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element has been deleted successfully")
        else:
            print(data," is not present in linked list")

    def display(self):
         temp=self.__head
         while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

class Child:
    def __init__(self,name,item_to_perform):
        self.__name=name
        self.__item_to_perform=item_to_perform

    def __str__(self):
        return(self.__name+" "+self.__item_to_perform)

    def get_name(self):
        return self.__name

    def get_item_to_perform(self):
        return self.__item_to_perform

class Performance:
    def __init__(self,children_list):
        self.__children_list=children_list

    def get_children_list(self):
        return self.__children_list

    def change_position(self,child):
        temp=self.__children_list.get_head()
        temp1=self.__children_list.get_head()
        while temp.get_next():
            temp1=temp1.get_next()
            if temp.get_next().get_next():
                temp=temp.get_next().get_next()
        self.__children_list.delete(child)
        self.__children_list.add_in_between(child,temp1.get_data())

    def add_new_child(self,child):
        temp=self.__children_list.get_head()
        while temp.get_next():
            temp=temp.get_next()
        self.__children_list.add_in_between(child,temp.get_data())

child1=Child("Rahul","solo song")
child2=Child("Sheema","Dance")
child3=Child("Gitu","Plays Flute")
child4=Child("Tarun","Gymnastics")
child5=Child("Tom","MIME")


children_list=LinkedList()
children_list.add_at_end(child1)
children_list.add_at_end(child2)
children_list.add_at_end(child3)
children_list.add_at_end(child4)
children_list.add_at_end(child5)

performance=Performance(children_list)
print("The order in which the children would perform:")
performance.get_children_list().display()
print()
print("After Rahul's performance, the schedule would change to:")
performance.change_position(child1)
performance.get_children_list().display()
print()

child6=Child("Swetha","Vote of Thanks")
print("After Swetha has joined, the schedule is:")
performance.add_new_child(child6)
performance.get_children_list().display()

##########a3

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data
    
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add_at_end(self,data):
        new_node=Node(data)         #create a new node
        if self.__head is None:      #if linked list is empty
            self.__head=self.__tail=new_node      #make that new_node as ead and tail both
            return "Element added successfully: "+str(self.__tail.get_data())
        else:           #if list is not empty
            self.__tail.set_next(new_node)  #set the next of tail node
            self.__tail=new_node    #make the new node as tail node
            return "Element added successfully: "+str(self.__tail.get_data())

    def add_at_beginning(self,data):
        new_node=Node(data)         #create a new node
        new_node.set_next(self.__head)
        self.__head=new_node
        return "data inserted"

    def add_in_between(self,data,data_before):
        new_node=Node(data)         #create a new node
        if data_before==None:
            new_node.set_next(self.__head)
            self.__head=new_node
            if new_node.get_next()==None:
                self.__tail=new_node
        else:
            node_before=self.find_node(data_before)
            if node_before is not None:
                new_node.set_next(node_before.get_next())
                node_before.set_next(new_node)
            else:
                print(data_before, "is not present in linkedlist")

    def find_node(self,data):
        temp=self.__head
        while(temp is not None):
            if temp.get_data()==data:
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)
        if node is not None:
            if node==self.__head:
                if self.__head==self.__tail:
                    self.__tail=None
                self.__head=node.get_next()
            else:
                temp=self.__head
                while temp is not None:
                    if temp.get_next()==node:
                        temp.set_next(node.get_next())
                        if node==self.__tail:
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element has been deleted successfully")
        else:
            print(data," is not present in linked list")

    def display(self):
         temp=self.__head
         while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

class Compartment:
    def __init__(self,compartment_name,no_of_passengers,total_seats):
        self.__compartment_name=compartment_name
        self.__no_of_passengers=no_of_passengers
        self.__total_seats=total_seats

    def get_compartment_name(self):
        return self.__compartment_name

    def get_no_of_passengers(self):
        return self.__no_of_passengers

    def get_total_seats(self):
        return self.__total_seats

class Train:
    def __init__(self,train_name,compartment_list):
        self.__train_name=train_name
        self.__compartment_list=compartment_list

    def get_train_name(self):
        return self.__train_name

    def get_compartment_list(self):
        return self.__compartment_list

    def count_compartments(self):
        temp=self.__compartment_list.get_head()
        count=0
        while temp:
            count+=1
            temp=temp.get_next()
        return count

    def check_vacancy(self):
        temp=self.__compartment_list.get_head()
        count=0
        while temp:
            vacancy=(temp.get_data().get_total_seats()-temp.get_data().get_no_of_passengers())/temp.get_data().get_total_seats()
            if vacancy>0.5:
                count+=1
            temp=temp.get_next()
        return count

compartment1=Compartment("SL",250,400)
compartment2=Compartment("2AC",125,280)
compartment3=Compartment("3AC",120,300)
compartment4=Compartment("FC",160,300)
compartment5=Compartment("1AC",100,210)

compartment_list=LinkedList()
compartment_list.add_at_end(compartment1)
compartment_list.add_at_end(compartment2)
compartment_list.add_at_end(compartment3)
compartment_list.add_at_end(compartment4)
compartment_list.add_at_end(compartment5)

train1=Train("Shatabdi",compartment_list)
count=train1.count_compartments()
print("The number of compartments in the train:",count)

vacancy_count=train1.check_vacancy()
print("The number of compartments which have more than 50% vacancy:",vacancy_count)

